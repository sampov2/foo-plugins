<?xml version="1.0"?>
<!DOCTYPE ladspa SYSTEM "ladspa-swh.dtd">
<?xml-stylesheet href="ladspa.css" type="text/css"?>
<!--
    Foo Transient Architect - control dynamics of transients
    Copyright (C) 2006  Sampo Savolainen <v2@iki.fi>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

-->

<ladspa>
  <global>
    <meta name="maker" value="Sampo Savolainen &lt;v2@iki.fi&gt;"/>
    <meta name="copyright" value="GPL"/>
    <meta name="properties" value="HARD_RT_CAPABLE"/>
  </global>

  <plugin label="foo_transients_v2" id="3189" class="DynamicsPlugin">
    <name>Foo Transient Architect v2</name>

    <callback event="instantiate"><![CDATA[
	slow_rms = rms_new((float)s_rate, 0.06f);
        fast_rms = rms_new((float)s_rate, 0.01f);
    ]]></callback>

    <callback event="cleanup"><![CDATA[
	rms_free (plugin_data->fast_rms);
	rms_free (plugin_data->slow_rms);
    ]]></callback>

    <callback event="run"><![CDATA[
	// DSP
	unsigned long i;
	float tmp, fast, slow;

	float relevant_attack_gain  = 0.0f;
	float relevant_release_gain = 0.0f;

#define MIN_ENVELOPE_SPEED 0.01f
#define MAX_ENVELOPE_SPEED 0.1f

	float average_difference = MIN_ENVELOPE_SPEED + detection_envelope_speed * (MAX_ENVELOPE_SPEED - MIN_ENVELOPE_SPEED);

#define BASELINE 0.05f
	rms_set_time(slow_rms, BASELINE + average_difference / 2);
	rms_set_time(fast_rms, BASELINE - average_difference / 2);
#undef BASELINE

	for (i = 0; i < sample_count; i++) {

	    if (fabsf(input_left[i]) > fabsf(input_right[i]))
	        tmp = input_left[i];
	    else
	        tmp = input_right[i];

	    slow = CO_DB(rms_run(slow_rms, tmp));
	    fast = CO_DB(rms_run(fast_rms, tmp));

	    if (fast > slow) {
		// Attack
		tmp = (fast - slow) * attack_gain_multiplier;
	
		if ( ( attack_gain_multiplier < 0.0f && tmp < relevant_attack_gain) ||
		     ( attack_gain_multiplier > 0.0f && tmp > relevant_attack_gain) )
			relevant_attack_gain = tmp;
			
	    } else {
		// Release
		tmp = (slow - fast) * release_gain_multiplier;

		if ( ( release_gain_multiplier < 0.0f && tmp < relevant_release_gain) ||
		     ( release_gain_multiplier > 0.0f && tmp > relevant_release_gain) )
			relevant_release_gain = tmp;

		//printf("Release gain: %f, envelope difference = %f\n", tmp, slow - fast);
	    }

	    buffer_write(output_left[i],  input_left[i]  * DB_CO(tmp));
	    buffer_write(output_right[i], input_right[i] * DB_CO(tmp));

#ifdef FOO_TESTER
	    //buffer_write(output_right[i], tmp);
	    //buffer_write(output_right[i], DB_CO(tmp) - 1.0f);

	    // Default tester operations, suitable for architect_graph.sh
	    buffer_write(output_left[i], fast);
	    buffer_write(output_right[i], slow);
#endif 
	}

	*(plugin_data->actual_attack_gain)  = relevant_attack_gain;
	*(plugin_data->actual_release_gain) = relevant_release_gain;

    ]]></callback>


    <port label="detection_envelope_speed" dir="input" type="control" hint="default_high">
      <name>Detection speed slow/fast</name>
      <p>Controls the averaging time difference between the controlling envelopes</p>
      <range min="0.0" max="1.0"/>
    </port>

<!--
    <port label="gain_envelope_speed" dir="input" type="control" hint="default_high">
      <name>Reaction speed slow/fast</name>
      <p>Controls the averaging time difference between the controlling envelopes</p>
      <range min="0.0" max="1.0"/>
    </port>
-->

    <port label="attack_gain_multiplier" dir="input" type="control" hint="default_0">
      <name>Attack control</name>
      <p>Attack gain range control</p>
      <range min="-10.0" max="+10.0"/>
    </port>

    <port label="release_gain_multiplier" dir="input" type="control" hint="default_0">
      <name>Release control</name>
      <p>Release gain range control</p>
      <range min="-10.0" max="+10.0"/>
    </port>

    <port label="actual_attack_gain" dir="output" type="control">
      <name>Current attack gain (dB)</name>
      <p>The amount of gain applied at the moment</p>
      <range min="-30.0" max="+30.0"/>
    </port>

    <port label="actual_release_gain" dir="output" type="control">
      <name>Current release gain (dB)</name>
      <p>The amount of gain applied at the moment</p>
      <range min="-30.0" max="+30.0"/>
    </port>

    <port label="latency" dir="output" type="control">
      <name>latency</name>
    </port>

    <port label="input_left" dir="input" type="audio">
      <name>Input L</name>
    </port>

    <port label="input_right" dir="input" type="audio">
      <name>Input R</name>
    </port>

    <port label="output_left" dir="output" type="audio">
      <name>Output L</name>
    </port>

    <port label="output_right" dir="output" type="audio">
      <name>Output R</name>
    </port>

    <instance-data label="slow_rms"     type="rms *"/>
    <instance-data label="fast_rms"     type="rms *"/>

  </plugin>
</ladspa>
